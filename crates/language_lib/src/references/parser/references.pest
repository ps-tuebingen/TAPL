WHITESPACE = _{ " " | "\n" | "\t" }
program = { SOI ~ term ~ EOI }

// Keywords 
kw_unit = { "unit" }
kw_ref = { "ref" }
kw_let = { "let" }
kw_in = { "in" }
kw_if = { "if" }
kw_else = { "else" }
kw_fix = { "fix" }
kw_succ = { "succ" }
kw_pred = { "pred" }
kw_iszero = { "iszero" }
kw_true = { "true" }
kw_false = { "false" }
kw_tyref = { "Ref" }
kw_tybool = { "Bool" }
kw_tyunit = { "Unit" }
kw_tynat = { "Nat" }

keyword = { 
  | kw_unit 
  | kw_ref
  | kw_let
  | kw_in
  | kw_fix
  | kw_iszero
  | kw_if
  | kw_true 
  | kw_false
  | kw_else 
  | kw_tyunit
  | kw_tybool
  | kw_tyref
  | kw_tynat
}

// Terms 
term = { prim_term ~ left_rec? }
paren_term = { "(" ~ term ~ ")" }

const = { kw_unit | kw_true | kw_false }

prim_term = {
  | paren_term
  | const 
  | lambda_term
  | fix_term
  | let_term
  | if_term
  | succ_term
  | pred_term
  | iszero_term
  | ref_term
  | deref_term
  | number
  | variable 
}

deref_term = { "!" ~ term }
ref_term = { kw_ref ~ paren_term }
let_term = { kw_let ~ "(" ~ variable ~ "=" ~ term ~ ")" ~ kw_in ~ term }
fix_term = { kw_fix ~ paren_term }
if_term = { kw_if ~ "(" ~ term ~ ")" ~ "{" ~ term ~ "}" ~ kw_else ~ "{" ~ term ~ "}" }
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ paren_term }
succ_term = { kw_succ ~ paren_term }
pred_term = { kw_pred ~ paren_term }
iszero_term = { kw_iszero ~ paren_term} 

// Left Recursive Terms
left_rec = { assign_term | sequence | term }

assign_term = { ":=" ~ term }
sequence = { ";" ~ term }

variable = @{ !(keyword ~ !ASCII_ALPHANUMERIC) ~ ( !(WHITESPACE) ~ (ASCII_ALPHA|ASCII_DIGIT) )+ | "_" }
number = { ASCII_DIGIT+ }

// Types 
type = {
  | prim_type
  | fun_type
  | ref_type
  | paren_type
}
paren_type = { "(" ~ type ~ ")" }
prim_type = { kw_tyunit | kw_tynat | kw_tybool }
fun_type = { "(" ~ type ~ "->" ~ type ~ ")" }
ref_type = { kw_tyref ~ type }
