WHITESPACE = _{ " " | "\n" | "\t" }
program = { SOI ~ term ~ EOI }

// Keyword 
kw_unit = _{ "unit" }
kw_fix = _{ "fix" }
kw_let = _{ "let" }
kw_as = _{ "as" }
kw_in = _{ "in" }
kw_try = _{ "try" }
kw_with = _{ "with" }
kw_catch = _{ "catch" }
kw_raise = _{ "raise" }
kw_error = _{ "error" }
kw_true = _{ "true" } 
kw_false = _{ "false" }
kw_zero = _{ "zero" }
kw_succ = _{ "succ" }
kw_pred = _{ "pred" }
kw_iszero = _{ "iszero" }
kw_if = _{ "if" }
kw_else = _{ "else" }
kw_forall = _{ "forall" }
kw_exists = _{ "exists" }
kw_tytop = _{ "Top" }
kw_tyunit = _{ "Unit" }
kw_tynat = _{ "Nat" }
kw_tybool = _{ "Bool" }

keyword = _{
  | kw_unit
  | kw_fix
  | kw_try
  | kw_with 
  | kw_raise
  | kw_error 
  | kw_let
  | kw_as
  | kw_in
  | kw_true 
  | kw_false
  | kw_succ 
  | kw_pred
  | kw_iszero
  | kw_if
  | kw_else
  | kw_forall
  | kw_exists
  | kw_tyunit
  | kw_tynat
  | kw_tybool
}

// Terms 
term = { prim_term ~ left_rec? }
paren_term = { "(" ~ term ~ ")" }

prim_term = {
  | const_term 
  | fix_term
  | let_term
  | lambda_term
  | lambda_sub_term
  | ty_lambda_term
  | ty_lambda_kinded_term
  | pack_term
  | unpack_term
  | record_term
  | succ_term
  | pred_term
  | iszero_term
  | if_term
  | try_term 
  | try_catch
  | err_term
  | raise_term 
  | paren_term
  | number
  | variable 
}

const_term = { kw_unit | kw_zero | kw_true | kw_false } 
fix_term = { kw_fix ~ term }
let_term = { kw_let ~ "(" ~ variable ~ "=" ~ term ~ ")" ~ kw_in ~ term }
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ term }
lambda_sub_term = { "\\" ~ variable ~ "<:" ~ type ~ "." ~ term }
ty_lambda_term = { "\\" ~ variable ~ "." ~ term }
ty_lambda_kinded_term = { "\\" ~ variable ~ "::" ~ kind ~ "." ~ term }
pack_term = { "{" ~ "*" ~ type ~ "," ~ term ~ "}" ~ kw_as ~ type }
unpack_term = { kw_let ~ "{" ~ variable ~ "," ~ variable ~ "}" ~ "=" ~ term ~ kw_in ~ term }
record_term = { "{" ~ variable ~ "=" ~ term ~ ("," ~ variable ~ "=" ~ term)* ~ "}" }
succ_term = { kw_succ ~ paren_term }
pred_term = { kw_pred ~ paren_term }
iszero_term = { kw_iszero ~ paren_term }
if_term = { kw_if ~ "(" ~ term ~ ")" ~ "{" ~ term ~ "}" ~ kw_else ~ "{" ~ term ~ "}" }
try_term = { kw_try ~ "{" ~ term ~ "}" ~ kw_with ~ "{" ~ term ~ "}" }
try_catch = { kw_try ~ "{" ~ term ~ "}" ~ kw_catch ~ "{" ~ term ~ "}" }
err_term = { kw_error ~ "[" ~ type ~ "]" }
raise_term = { kw_raise ~ "[" ~ type ~ "]" ~ "(" ~ term ~ ":" ~ type ~ ")" } 

left_rec = { record_proj | tyapp | term }
record_proj = { "." ~ variable } 
tyapp = { "[" ~ type ~ "]" }

variable = @{ !(keyword ~ !ASCII_ALPHANUMERIC) ~ ( !(WHITESPACE) ~ (ASCII_ALPHA|ASCII_DIGIT) )+ | "_" }
number = { ASCII_DIGIT+ }

// Types
paren_type = {"(" ~ type ~ ")"}
type = { prim_type ~ left_rec_type? }

prim_type = {
  | const_type 
  | top_type
  | top_type_star
  | prod_type
  | forall_bounded_type
  | forall_unbounded_type
  | forall_kinded_type
  | exists_bounded_type
  | exists_unbounded_type
  | exists_kinded_type
  | op_lambda_type
  | op_lambda_sub_type
  | op_lambda_star_type
  | sum_type
  | record_type
  | variant_type
  | tuple_type
  | variable
  | paren_type
}

const_type = { kw_tybool | kw_tynat | kw_tyunit }
top_type  = { kw_tytop ~ "[" ~ kind ~ "]" }
top_type_star = { kw_tytop }
forall_bounded_type = { forall_start ~ "<:" ~ type ~ "." ~ type } 
forall_unbounded_type = { forall_start ~ "." ~ type }
forall_kinded_type = { forall_start ~ "::" ~ kind ~ "." ~ type } 
forall_start = ${ kw_forall ~ " " ~ variable }
exists_bounded_type ={ "{" ~ exists_start ~ "<:" ~ type ~ "," ~ type ~ "}"  } 
exists_unbounded_type = { "{" ~ exists_start ~ "," ~ type ~ "}" }
exists_kinded_type = { "{" ~ exists_start ~ "::" ~ kind ~ "," ~ type ~ "}" }
exists_start = ${ kw_exists ~ " " ~ variable }
op_lambda_star_type = { "\\" ~ variable ~ "." ~ type }
op_lambda_type = { "\\" ~ variable ~ "::" ~ kind ~ "." ~ type }
op_lambda_sub_type = { "\\" ~ variable ~ "<:" ~ type ~ "." ~ type }
prod_type = { "(" ~ type ~ "x" ~ type ~ ")" }
sum_type = { "(" ~ type ~ "+" ~ type ~ ")" }
record_type =  { "{" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ "}" }
variant_type = { "<" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ ">" }
tuple_type = { "(" ~ type ~ ("," ~ type)+ ~ ")" }

left_rec_type = { fun_type | op_app_type }
fun_type = { "->" ~ type }
op_app_type = { "[" ~ type ~ "]" }

//Kinds
kind = { prim_kind ~ arrow_kind? } 
prim_kind = { 
  | paren_kind
  | star_kind
}

paren_kind = { "(" ~ kind ~ ")" }
star_kind = { "*" }
arrow_kind = { "=>" ~ kind } 
