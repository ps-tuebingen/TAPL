WHITESPACE = _{ " " | "\n" | "\t" }
program = { SOI ~ term ~ EOI }

// Keyword 
kw_unit = { "unit" }
kw_try = { "try" }
kw_with = { "with" }
kw_catch = { "catch" }
kw_raise = { "raise" }
kw_error = { "error" }
kw_true = { "true" } 
kw_false = { "false" }
kw_succ = { "succ" }
kw_pred = { "pred" }
kw_iszero = { "iszero" }
kw_tyunit = { "Unit" }
kw_tynat = { "Nat" }
kw_tybool = { "Bool" }

keyword = {
  | kw_unit
  | kw_try
  | kw_with 
  | kw_raise
  | kw_error 
  | kw_true 
  | kw_false
  | kw_succ 
  | kw_pred
  | kw_iszero
  | kw_tyunit
  | kw_tynat
  | kw_tybool
}

// Terms 
term = { prim_term ~ left_rec? }
paren_term = { "(" ~ term ~ ")" }

prim_term = {
  | const 
  | lambda_term
  | succ_term
  | pred_term
  | iszero_term
  | try_term 
  | try_catch
  | raise_term 
  | paren_term
  | number
  | variable 
}

const = { kw_unit | kw_error | kw_true | kw_false } 
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ term }
succ_term = { kw_succ ~ paren_term }
pred_term = { kw_pred ~ paren_term }
iszero_term = { kw_iszero ~ paren_term }
try_term = { kw_try ~ term ~ kw_with ~ term }
try_catch = { kw_try ~ term ~ kw_catch ~ term }
raise_term = { kw_raise ~ term } 

left_rec = { term }

variable = { !(keyword ~ !ASCII_ALPHANUMERIC) ~ ( !(WHITESPACE) ~ (ASCII_ALPHA|ASCII_DIGIT) )+ | "_" }
number = { ASCII_DIGIT+ }

// Types 
type = {
  | prim_type 
  | fun_type
  | paren_type
}

prim_type = { kw_tyunit | kw_tynat | kw_tybool }
fun_type = { "(" ~ type ~ "->" ~ type ~ ")" }
paren_type = { "(" ~ type ~ ")" }
