WHITESPACE = _{ " " | "\n" | "\t" }
variable = @{ !(keyword ~ !ASCII_ALPHANUMERIC) ~ ( !(WHITESPACE) ~ (ASCII_ALPHA|ASCII_DIGIT) )+ | "_" }
number = { ASCII_DIGIT+ }

program = { SOI ~ term ~ EOI }

//Keywords
kw_as = _{ "as" }
kw_in = _{ "in" }
kw_let = _{ "let" }
kw_forall = _{ "forall" }
kw_exists = _{ "exists" }
keyword = _{ 
  | kw_as
  | kw_in 
  | kw_let 
  | kw_forall 
  | kw_exists
}

//Terms 
term = { prim_term ~ left_rec? }
prim_term = {
  | paren_term
  | lambda_term 
  | tylambda_term
  | tylambda_star_term
  | pack_term
  | unpack_term
  | record_term
  | variable
}

paren_term = { "(" ~ term ~ ")" }
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ term }
tylambda_term = { "\\" ~ variable ~ "::" ~ kind ~ "." ~ term }
tylambda_star_term = { "\\" ~ variable ~ "." ~ term }
pack_term = { "{" ~ "*" ~ type ~ "," ~ term ~ "}" ~ kw_as ~ type }
unpack_term = { kw_let ~ "{" ~ variable ~ "," ~ variable ~ "}" ~ "=" ~ term ~ kw_in ~ term}
record_term = { "{" ~ variable ~ "=" ~ term ~ ("," ~ variable ~ "=" ~ term)* ~ "}" }

left_rec = { ty_app | record_projection | term }
ty_app = { "[" ~ type ~ "]" }
record_projection = { "." ~ variable }

//Types
type = { prim_type ~ left_rec_ty? }
prim_type = { 
  | paren_type 
  | forall_ty 
  | forall_star_ty
  | op_lambda_star
  | op_lambda
  | exists_ty
  | record_ty
  | variable 
}

paren_type = { "(" ~ type ~ ")" }
forall_ty = { forall_start ~ "::" ~ kind ~ "." ~ type } 
forall_star_ty = { forall_start ~ "." ~ type }
forall_start = ${ kw_forall ~ " " ~ variable } 
op_lambda_star = { "\\" ~ variable ~ "." ~ type }
op_lambda = { "\\" ~ variable ~ "::" ~ kind ~ "." ~ type }
exists_ty = { "{" ~ exists_start ~ "::" ~ kind ~ "," ~ type  ~ "}" } 
exists_start = @{ kw_exists ~ " " ~ variable } 
record_ty = { "{" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ "}" }

left_rec_ty = { fun_ty | type }
fun_ty = { "->" ~ type }

//Kinds
kind = { prim_kind ~ left_rec_kind? } 
prim_kind = { 
 | star_kind
 | paren_kind
 }

 paren_kind = { "(" ~ kind ~ ")" }
 star_kind = { "*" }

 left_rec_kind = { "=>" ~ kind } 
