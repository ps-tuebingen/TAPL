WHITESPACE = _{ " " | "\n" }
program = { SOI ~ term ~ EOI }

// Keywords
kw_tybool = _{ "Bool" }
kw_tynat = _{ "Nat" }
kw_tyunit = _{ "Unit" }

kw_true = _{ "true" }
kw_false = _{  "false" }
kw_zero = _{ "zero" }
kw_unit = _{ "unit" }
kw_nothing = _{ "Nothing" }
kw_something = _{ "Something" }
kw_if = _{ "if" }
kw_then = _{ "then" }
kw_else = _{ "else" }
kw_fix = _{ "fix" }
kw_let = _{ "let" }
kw_in = _{ "in" }
kw_pred = _{ "pred" }
kw_succ = _{ "succ" }
kw_iszero = _{ "iszero" }
kw_inl = _{ "inl" }
kw_inr = _{ "inr" }
kw_nil = _{ "Nil" }
kw_cons = _{ "Cons" }
kw_head = _{ "head" }
kw_tail = _{ "tail" }
kw_isnil = _{ "isnil" }
kw_case = _{ "case" }
kw_of = _{ "of" }
kw_as = _{ "as" }

keyword = { 
  | kw_tybool
  | kw_tynat
  | kw_tyunit
  | kw_zero
  | kw_unit 
  | kw_something
  | kw_nothing
  | kw_if
  | kw_then 
  | kw_else
  | kw_fix
  | kw_let 
  | kw_in
  | kw_pred 
  | kw_succ
  | kw_iszero
  | kw_inl
  | kw_inr
  | kw_nil
  | kw_cons
  | kw_head
  | kw_tail
  | kw_isnil
  | kw_case
  | kw_of
  | kw_as
}

// Types 
prim_type = { kw_tybool | kw_tynat | kw_tyunit }
fun_type = { "(" ~ type ~ "->" ~ type ~ ")" }
prod_type = { "(" ~ type ~ "x" ~ type ~ ")" }
sum_type = { "(" ~ type ~ "+" ~ type ~ ")" }
record_type =  { "{" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ "}" }
variant_type = { "<" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ ">" }
paren_type = {"(" ~ type ~ ")"}
type = {
  | prim_type 
  | fun_type
  | prod_type
  | sum_type
  | record_type
  | variant_type
  | paren_type
}

// Terms 
term = { 
  | app_term
  | ascription
  | proj
  | paren_term

  | const 
  | if_term
  | fix_term
  | let_term
  | some_term
  | none_term
  | pred_term
  | succ_term
  | isz_term
  | left_term
  | right_term
  | nil_term
  | cons_term
  | head_term
  | tail_term
  | isnil_term
  | case_term

  | lambda_term
  | tup_term
  | rec_term
  | variant_term

  | variable 
  | number
}

// Starts with keyword 
const = { kw_true | kw_false | kw_zero | kw_unit }
if_term = {  kw_if ~ term ~ kw_then ~ term ~ kw_else ~ term }
fix_term = { kw_fix ~ term }
let_term = { kw_let  ~ variable ~ "=" ~ term ~ kw_in ~ term } 
some_term = { kw_something ~ paren_term } 
none_term = { kw_nothing ~ "[" ~ type ~ "]" } 

pred_term = { kw_pred ~ paren_term } 
succ_term = { kw_succ ~ paren_term }
isz_term = { kw_iszero ~ paren_term }

left_term = { kw_inl ~ paren_term ~ kw_as ~ type } 
right_term = { kw_inr ~ paren_term ~ kw_as ~ type }

nil_term = { kw_nil ~ "[" ~ type ~ "]" }
cons_term = { kw_cons ~ "[" ~ type ~ "]" ~ "(" ~ term ~ "," ~ term ~ ")" } 
head_term = { kw_head ~ "[" ~ type ~ "]" ~ "(" ~ term ~ ")" }
tail_term = { kw_tail ~ "[" ~ type ~ "]" ~ "(" ~ term ~ ")" }
isnil_term = { kw_isnil ~ "[" ~ type ~ "]" ~ "(" ~ term ~ ")" }

//Cases
case_term = { kw_case ~ term ~ "of" ~ "{" ~ pattern ~ ("|" ~ pattern)* ~ "}" }
pattern = { pt_binding ~ "=>" ~ term }
pt_binding = { inl_bnd | inr_bnd | variant_bnd | some_bnd | none_bnd }
inl_bnd = { kw_inl ~ "(" ~ variable ~ ")" }
inr_bnd = { kw_inr ~ "(" ~ variable ~ ")" }
variant_bnd = { "<" ~ variable ~ "=" ~ variable ~ ">" }
some_bnd = { kw_something ~ "(" ~ variable ~ ")" }
none_bnd = { kw_nothing }

//Starts with symbol
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ term }
tup_term = { "{" ~ term ~ ("," ~ term)* ~ "}" }
rec_term = { "{" ~ variable ~ "=" ~ term ~ ("," ~ variable ~ "=" ~ term)* ~ "}" }
variant_term = { "<" ~ variable ~ "=" ~ term ~ ">" ~ kw_as ~ type } 

//Left Recursive Terms 
app_term = { "(" ~ term ~ " " ~ term ~ ")"}
ascription = { "(" ~ term ~ ")" ~ kw_as ~ type }
proj = { (variable | paren_term) ~ "." ~ ( variable | number ) }
paren_term = { "(" ~ term ~ ")" }

//Constants
variable = { !(keyword ~ !ASCII_ALPHANUMERIC) ~ ASCII_ALPHANUMERIC+ }
number = { ASCII_DIGIT+ }

