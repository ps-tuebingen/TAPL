WHITESPACE = _{ " " | "\n" | "\t" }
program = { SOI ~ term ~ EOI }

// Keywords 
kw_unit = { "unit" }
kw_as = { "as" }
kw_zero = { "zero" }
kw_true = { "true" }
kw_false = { "false" }
kw_case = { "case" }
kw_of = { "of" }
kw_nil = { "Nil" }
kw_cons = { "Cons" }
kw_succ = { "succ" }
kw_pred = { "pred" }
kw_ref = { "ref" }
kw_if = { "if" }
kw_else = { "else" }
kw_let = { "let" }
kw_in = { "in" }
kw_fix = { "fix" }
kw_tytop = { "Top" }
kw_tybot = { "Bot" }
kw_tylist = { "List" }
kw_tyref = { "Ref" }
kw_tysource = { "Source" }
kw_tysink = { "Sink" }
kw_tynat = { "Nat" }
kw_tyunit = { "Unit" }
kw_tybool = { "Bool" }

keyword = {
 | kw_unit 
 | kw_as 
 | kw_zero
 | kw_true 
 | kw_false
 | kw_case 
 | kw_of
 | kw_nil
 | kw_cons
 | kw_succ
 | kw_pred
 | kw_ref
 | kw_if
 | kw_else
 | kw_let 
 | kw_in
 | kw_fix
 | kw_tybot
 | kw_tytop
 | kw_tylist
 | kw_tyref
 | kw_tysource 
 | kw_tysink
 | kw_tynat
 | kw_tybool
}

// Terms 
term = { prim_term ~ left_rec? }

prim_term = {
  | const 
  | lambda_term
  | rec_term 
  | variant_term
  | variant_case 
  | nil_term 
  | cons_term
  | list_case 
  | succ_term
  | pred_term
  | ref_term
  | deref_term
  | if_term
  | let_term
  | fix_term
  | paren_term
  | number 
  | variable
}

paren_term = { "(" ~ term ~ ")" }

const = { kw_unit | kw_true | kw_false | kw_zero } 
lambda_term = { "\\" ~ variable ~ ":" ~ type ~ "." ~ term }
rec_term = { "{" ~ variable ~ "=" ~ term ~ ("," ~ variable ~ "=" ~ term)* ~ "}" }
variant_term = { "<" ~ variable ~ "=" ~ term ~ ">" ~ kw_as ~ type }
variant_case = { kw_case ~ term ~ kw_of ~ "{" ~ variant_pattern ~ ("|" ~ variant_pattern)* ~ "}" }
variant_pattern = { "<" ~ variable ~ "=" ~ variable  ~ ">" ~ "=>" ~ term }
nil_term = { kw_nil ~ "[" ~ type ~ "]" }
cons_term = { kw_cons ~ "[" ~ type ~ "]" ~ "(" ~ term ~ "," ~ term ~ ")" }
list_case = { kw_case ~ term  ~ kw_of ~ "{" ~ ((nil_pt ~ "|" ~ cons_pt) | (cons_pt~"|"~nil_pt)) ~ "}" } 
nil_pt = { kw_nil ~ "=>" ~ term }
cons_pt = { kw_cons ~ "(" ~ variable ~ "," ~ variable ~ ")" ~ "=>" ~ term }
succ_term = { kw_succ ~ paren_term }
pred_term = { kw_pred ~ paren_term }
ref_term = { kw_ref ~ paren_term } 
deref_term = { "!" ~ term }
if_term = { kw_if ~ "(" ~ term  ~ ")" ~ "{" ~ term ~ "}" ~ kw_else ~ "{" ~ term ~ "}" }
let_term = { kw_let ~ "(" ~ variable ~ "=" ~ term ~ ")" ~ kw_in ~ term }
fix_term = { kw_fix ~ paren_term }

left_rec = { cast_term | proj_term | assign_term | seq_term | term  }
cast_term = { kw_as ~ type }
proj_term = { "." ~ variable }
assign_term = { ":=" ~ term }
seq_term = { ";" ~ term }

variable = @{ !(keyword ~ !ASCII_ALPHANUMERIC) ~ ( (ASCII_ALPHA|ASCII_DIGIT) | "_")+ }
number = { ASCII_DIGIT+ }

// Types 
type = {
  | prim_type 
  | fun_type
  | rec_type 
  | variant_type
  | list_type 
  | ref_type 
  | sink_type
  | source_type
  | paren_ty 
}

prim_type = { kw_tytop ~ "[*]"? | kw_tybot | kw_tynat | kw_tyunit | kw_tybool } 
paren_ty = { "(" ~ type ~ ")" } 
fun_type = { "(" ~ type ~ "->" ~ type ~ ")" }
rec_type = { "{" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ "}" }
variant_type = { "<" ~ variable ~ ":" ~ type ~ ("," ~ variable ~ ":" ~ type)* ~ ">" }
list_type = { kw_tylist ~ paren_ty }
ref_type = { kw_tyref ~ paren_ty } 
sink_type = { kw_tysink ~ paren_ty }
source_type = { kw_tysource ~ paren_ty } 
