def inccounterclass :: 
  {x:Ref[Nat]} -> 
  (Unit -> {get:(Unit -> Nat), set:(Nat->Unit), inc:(Unit -> Unit)}) -> 
  Unit -> {get:Unit->Nat,set:Nat -> Unit,inc:Unit -> Unit} := 
  (\r:{x:Ref[Nat]}.(
    \self:(Unit -> {get:(Unit -> Nat), set:(Nat->Unit), inc:(Unit -> Unit)}).(
        \_:Unit.(
          {
            get = \_:Unit.(!(r.x)),
            set = \i:Nat.((r.x):=i),
            inc = \_:Unit.(((self(unit)).set)(succ(((self(unit)).get)(unit))))
          }
        )
       )
      ));

def main := \r:{x:Ref[Nat], a:Ref[Nat]}.(
  \self:(Unit -> {get:(Unit->Nat), set:(Nat->Unit), inc:(Unit->Unit), accesses:(Unit->Nat)}).(
    \_:Unit.(
      let (super = (((inccounterclass (r))self) (unit))) in 
      {
        get=super.get,
        set=\i:Nat.(((r.a):=succ(!(r.a)));((super.set)(i))),
        inc=super.inc,
        accesses=\_:Unit.(!(r.a))
      }
    )
  )
);
