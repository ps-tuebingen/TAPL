def counterclass :: {x:Ref[Nat]} -> {get:Unit->Nat,inc:Unit->Unit} := 
  \r:{x:Ref[Nat]}.({
    get = \_:Unit.(!(r.x)),
    inc = \_:Unit.((r.x):=succ(!(r.x)))
  });

def main := \_:Unit.(
  let (r = {x=ref(1)}) in 
   (\r:{x:Ref[Nat]}.(
      let (super = counterclass (r)) in 
   {
     get = super.get,
     inc = super.inc,
     reset = \_:Unit.((r.x) := 1)
   }
  ))(r) 
);
