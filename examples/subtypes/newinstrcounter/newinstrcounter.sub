def main := \_:Unit.(
  let (r = {x=ref(1), a=ref(0)}) in 
  (fix((
    \r:{x:Ref[Nat], a:Ref[Nat]}.(
      \self:(Unit -> {get:(Unit->Nat), set:(Nat->Unit), inc:(Unit->Unit), accesses:(Unit->Nat)}).(
        \_:Unit.(
          let (super = (((\r:{x:Ref[Nat]}.(
            \self:(Unit -> {get:(Unit -> Nat), set:(Nat->Unit), inc:(Unit -> Unit)}).(
              \_:Unit.(
              {
                get = \_:Unit.(!(r.x)),
                set = \i:Nat.((r.x):=i),
                inc = \_:Unit.(((self(unit)).set)(succ(((self(unit)).get)(unit))))
              }
            )
          )
          ))(r))(self))(unit)) in 
          {
            get=super.get,
            set=\i:Nat.(((r.a):=succ(!(r.a)));((super.set)(i))),
            inc=super.inc,
            accesses=\_:Unit.(!(r.a))
          }
        )
      )
    )
  )(r)))(unit)
);
