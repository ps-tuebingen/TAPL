def counterclass :: {x:Ref[Nat]} -> { get:Unit -> Nat, inc:Unit -> Unit} := 
  (\r:{x:Ref[Nat]}.({
    get = \_:Unit.(!(r.x)),
    inc = \_:Unit.((r.x):=succ(!(r.x)))
  }));

def resetcounterclass :: {x:Ref[Nat]} -> { get:Unit->Nat, inc:Unit->Unit, reset:Unit -> Unit} :=  
  \r:{x:Ref[Nat]}.(
    let (super = (counterclass (r))) in 
    {
        get = super.get,
        inc = super.inc,
        reset = \_:Unit.((r.x) := 1)
    }
  );

def main := \r:{ x: Ref[Nat],b:Ref[Nat] }.(
  let (super = resetcounterclass (r)) in
    {
      get = super.get,
      inc = super.inc,
      reset = \_:Unit.((r.x):=!(r.b)),
      backup = \_:Unit.((r.b):=!(r.x))
    }
);
